/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import java.awt.AWTException;
import java.awt.CheckboxMenuItem;
import java.awt.Menu;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import logic.Test;
import util.IOTest;

/**
 *
 * @author ivan
 */
public class Haupt extends javax.swing.JFrame {

    /**
     * Creates new form Haupt
     */
    public Haupt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("jButton6");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)
                        .addGap(92, 92, 92)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton5)
                                .addGap(64, 64, 64)
                                .addComponent(jButton6)))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton2)))
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jButton4)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        IOTest iot = new IOTest();
        iot.sageTest();
        List<Test> ls = iot.getListTest();
        for(Test t: ls)
            System.out.println(t.getName());
    }//GEN-LAST:event_jButton1ActionPerformed

    private final SystemTray systemTray = SystemTray.getSystemTray();
    private TrayIcon trayIcon;
    
    
    /**
     * Нажатие кнопки ок
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        addTrayIcon();
        setState(JFrame.ICONIFIED); 
          
        
    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            
      
            
            
            trayIcon = new TrayIcon(ImageIO.read(new File("./1.png")), "Tray test application");            
            
            trayIcon.setPopupMenu(createPopupMenu());
            
            trayIcon.addActionListener(new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    setVisible(true);
                    setState(JFrame.NORMAL);
                    removeTrayIcon();
                }
            }); } catch (IOException ex) {
            Logger.getLogger(Haupt.class.getName()).log(Level.SEVERE, null, ex);
            
            addWindowStateListener(new WindowStateListener() {
                @Override
                public void windowStateChanged(WindowEvent e) {
                    //if (e.getNewState() == JFrame.ICONIFIED) {
                        System.out.println("11111111111111111");                        
                        System.out.println("2222222222");  
                        setVisible(false);
                        addTrayIcon();
                    //}
                }
            });
            addTrayIcon();
        }
    }//GEN-LAST:event_formWindowOpened

    private String getHash(String str) {
        
        MessageDigest md5 ;        
        StringBuilder  hexString = new StringBuilder();
        
        try {
                                    
            md5 = MessageDigest.getInstance("md5");
            
            md5.reset();
            md5.update(str.getBytes()); 
                        
                        
            byte messageDigest[] = md5.digest();
                        
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
                                                                                        
        } 
        catch (NoSuchAlgorithmException e) {                        
            return e.toString();
        }
        
        return hexString.toString();
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //System.out.println(getHash(null));
        for(int i=0;i<100;i++)
            System.out.println(getHash(jTextField1.getText()));
        jLabel1.setText(getHash(jTextField1.getText()));
    }//GEN-LAST:event_jButton3ActionPerformed

    private String getMDFile(String f) {

        try {
            
            final MessageDigest md = MessageDigest.getInstance("md5");
            final FileInputStream fis;
            try {
                fis = new FileInputStream(f);
                byte[] dataBytes = new byte[1024];
                int bytesRead;
                while ((bytesRead = fis.read(dataBytes)) > 0) {
                    md.update(dataBytes, 0, bytesRead);
                }
                byte[] mdBytes = md.digest();
                
                // Переводим контрольную сумму в виде массива байт в
                // шестнадцатеричное представление
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < mdBytes.length; i++) {
                    sb.append(Integer.toString((mdBytes[i] & 0xff) + 0x100, 16)
                            .substring(1));
                }
                return sb.toString();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Haupt.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Haupt.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Haupt.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";

    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        System.out.println(getMDFile("c:\\HashTab v5.2.0.14 Setup.exe"));
    }//GEN-LAST:event_jButton4ActionPerformed

    Session session = null;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        JSch jsch = null;
        //
        try {
            jsch = new JSch(); 
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session = jsch.getSession("itsoft", "192.168.100.22", 22);            
            session.setPassword("02128506");
            session.setConfig(config);
            session.connect();
            
            System.out.println("Connected to host: "+"192.168.100.22" + " с пользователем " + "itsoft" + " user. успешно");
            
            //URI from = new URI("/home/itsoft/Desktop/pp.exe");
                
                File out = new File(new File("c:\\"),"ges3.bkp");
            try (OutputStream os = new FileOutputStream(out);
                    BufferedOutputStream bos = new BufferedOutputStream(os)) {
                System.out.println("/home/itsoft/Desktop/pp.exe ->> c:\\"); 
                ChannelSftp channelSftp = newChannel(session, "sftp");
                //channelSftp.cd("/home/itsoft/Desktop/");
                channelSftp.cd("/home/boffice/BACKUP/dbgame/");
                Vector v =  channelSftp.ls("/home/boffice/BACKUP/dbgame/");
                for(Object ls:v)
                {
                    LsEntry l = (LsEntry) ls;
                    if(!l.getFilename().equals(".") && !l.getFilename().equals(".."))
                        System.out.println(l.getFilename());
                }
                //channelSftp.get("ges3.bkp", bos);
                //System.out.println("COPY OK");
            } catch (Exception e) {
                //throw new AceRuntimeException("Can not upload file", e);
                System.out.println("ERROR " + e);
            } finally {
                session.disconnect();
            }
            
        } catch (JSchException ex) {            
            System.out.println("eeeee" + ex);
        }

        
        //return session;
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        session.disconnect();
    }//GEN-LAST:event_jButton6ActionPerformed

    //private Logger log = LoggerFactory.getLogger(SshUtils.class);

        /**
         * Beware, session must be disconnected!
         * 
         * @param uri
         * @param props
         * @return
         */
        /*private  Session newSession(URI uri, Map<String, String> props) {
            try {
                JSch jsch = new JSch();
                Session session = jsch.getSession(getUser(uri), uri.getHost(), getPort(uri));
                session.setPassword(getPass(uri));
                Properties config = new Properties();
                config.putAll(props);
                session.setConfig(config);
                session.connect();
                
                URI from = new URI("/home/itsoft/Desktop/pp.exe");
                
                File out = new File(new File("c:\\"), from.getPath());
            try (OutputStream os = new FileOutputStream(out);
                    BufferedOutputStream bos = new BufferedOutputStream(os)) {
                System.out.println("/home/itsoft/Desktop/pp.exe ->> c:\\"); 
                ChannelSftp channelSftp = newChannel(session, "sftp");
                channelSftp.cd("/home/itsoft/Desktop/");
                channelSftp.get("pp.exe", bos);
            } catch (Exception e) {
                //throw new AceRuntimeException("Can not upload file", e);
                System.out.println("ERROR " + e);
            } finally {
                session.disconnect();
            }
                
                
                return session;
            } catch (JSchException e) {
                System.out.println("ERROR1 " + e);
            } catch (URISyntaxException ex) {
            Logger.getLogger(Haupt.class.getName()).log(Level.SEVERE, null, ex);
        }
            return null;
        }

        /**
         * @param uri
         * @return
         */
        /*private static Session newSession(URI uri) {
            Map<String, String> props = new HashMap<>();
            props.put("StrictHostKeyChecking", "no");
            return newSession(uri, props);
        }*/

        /**
         * @param session
         * @param type
         * @return
         */
        @SuppressWarnings("unchecked")
        private static <C extends Channel> C newChannel(Session session, String type) {
            try {
                Channel channel = session.openChannel(type);
                channel.connect();
                return (C) channel;
            } catch (JSchException e) {
                //throw new AceRuntimeException("Can not create " + type + " channel for " + session.getHost(), e);
                System.out.println("error8" + e);
            }
        return null;
        }

        /**
         * <pre>
         * sshCopy(&quot;file:/C:/UBS/work/downloads/error.log&quot;, &quot;ssh://aceadmin:ace01admin@ubs00000df2.ashcloud.ubsdev.net/home/aceadmin/temp/log&quot;);
         * sshCopy("ssh://aceadmin:ace01admin@ubs00000df2.ashcloud.ubsdev.net/home/aceadmin/temp/log/error.log", "file:/C:/UBS/work/downloads");
         * 
         * <pre>
         * @param fromUri file
         * @param toUri directory
         */
       /* public static void sshCopy(String fromUri, String toUri) {
            try {
                URI from = new URI(fromUri);
                URI to = new URI(toUri);

                if ("ssh".equals(to.getScheme()) && !"ssh".equals(from.getScheme())) {
                    upload(new File(fromUri).toURI(), to);
                } else if ("ssh".equals(from.getScheme()) && !"ssh".equals(to.getScheme())) {
                    download(from, new File(toUri).toURI());
                } else {
                    throw new IllegalArgumentException(fromUri + " --> " + toUri);
                }
            } catch (URISyntaxException e) {
                throw new AceRuntimeException(e);
            }
        }/**/

        /**
         * @param from
         *            file
         * @param to
         *            directory
         */
        /*private static void upload(URI from, URI to) {
            Session session = newSession(to);
            try (FileInputStream fis = new FileInputStream(new File(from))) {
                log.info(from + " --> " + to);
                ChannelSftp channelSftp = newChannel(session, "sftp");
                channelSftp.cd(to.getPath());
                channelSftp.put(fis, getName(from.getPath()));
            } catch (Exception e) {
                throw new AceRuntimeException("Can not upload file", e);
            } finally {
                session.disconnect();
            }
        }

        /**
         * @param from
         *            file
         * @param to
         *            directory
         */
        /*private static void download(URI from, URI to) {
            Session session = newSession(from);
            File out = new File(new File(to), getName(from.getPath()));
            try (OutputStream os = new FileOutputStream(out);
                    BufferedOutputStream bos = new BufferedOutputStream(os)) {
                log.info(from + " --> " + to);
                ChannelSftp channelSftp = newChannel(session, "sftp");
                channelSftp.cd(getFullPath(from.getPath()));
                channelSftp.get(getName(from.getPath()), bos);
            } catch (Exception e) {
                throw new AceRuntimeException("Can not upload file", e);
            } finally {
                session.disconnect();
            }
        }

        private static int getPort(URI uri) {
            return uri.getPort() < 0 ? 22 : uri.getPort();
        }

        private static String getUser(URI uri) {
            return uri.getUserInfo().split(":")[0];
        }

        private static String getPass(URI uri) {
            return uri.getUserInfo().split(":")[1];
        }

        private SshUtils() {
        }/**/
    
    //************************************************************
    
    
    
        PopupMenu createPopupMenu() {
        final PopupMenu popup = new PopupMenu();
        MenuItem aboutItem = new MenuItem("About");
        CheckboxMenuItem cb1 = new CheckboxMenuItem("Set auto size");
        CheckboxMenuItem cb2 = new CheckboxMenuItem("Set tooltip");
        Menu displayMenu = new Menu("Display");
        MenuItem errorItem = new MenuItem("Error");
        MenuItem warningItem = new MenuItem("Warning");
        MenuItem infoItem = new MenuItem("Info");
        MenuItem noneItem = new MenuItem("None");
        MenuItem exitItem = new MenuItem("Exit");
        // Add components to pop-up menu
        popup.add(aboutItem);
        popup.addSeparator();
        popup.add(cb1);
        popup.add(cb2);
        popup.addSeparator();
        popup.add(displayMenu);
        displayMenu.add(errorItem);
        displayMenu.add(warningItem);
        displayMenu.add(infoItem);
        displayMenu.add(noneItem);
        popup.add(exitItem);
        return popup;
    }
    
    
    private void removeTrayIcon()
  {
    systemTray.remove(trayIcon);
  }
 
  private void addTrayIcon()
  {
    try
    {
      systemTray.add(trayIcon);
      trayIcon.displayMessage("Tray test", "Window minimised to tray, double click to show", TrayIcon.MessageType.INFO);
    }
    catch(AWTException ex)
    {
        System.out.println("EROROROROOROROR" + ex);
    }
  }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Haupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Haupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Haupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Haupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Haupt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
